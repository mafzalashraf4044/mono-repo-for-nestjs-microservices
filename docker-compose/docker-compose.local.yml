version: '3.4'

x-common-variables: &kafka-common-variables
  KAFKA_MIN_INSYNC_REPLICAS: 1
  KAFKA_DEFAULT_REPLICATION_FACTOR: 1
  KAFKA_NUM_PARTITIONS: 1

services:
  # api-gateway:
  #   hostname: api-gateway
  #   container_name: api-gateway
  #   extends:
  #     file: docker-compose.local.base.yml
  #     service: nx-app-base
  #   command: nx run api-gateway:serve
  #   networks:
  #     - app-tier
  #   ports:
  #     - '4000:4000'
    # depends_on:
      # - user-gate
      # - health-journal

  # user-gate:
  #   hostname: user-gate
  #   container_name: user-gate
  #   extends:
  #     file: docker-compose.local.base.yml
  #     service: nx-app-base
  #   command: nx run user-gate:serve
  #   networks:
  #     - app-tier
  #   ports:
  #     - '3000:3000'
  #   depends_on:
  #     - pgsql
  #     - kafka-ui

  # health-journal:
  #   hostname: health-journal
  #   container_name: health-journal
  #   extends:
  #     file: docker-compose.local.base.yml
  #     service: nx-app-base
  #   command: nx run health-journal:serve
  #   networks:
  #     - app-tier
  #   ports:
  #     - '3001:3001'
  #   depends_on:
  #     - pgsql
  #     - kafka-ui

  pgsql:
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=localhost
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - app-tier
    ports:
      - '5432:5432'

  zookeeper-1:
    image: zookeeper:3.7.0
    restart: 'no'
    hostname: zookeeper-1
    container_name: zookeeper-1
    ports:
      - 2181:2181
    volumes:
      - zookeeper_1_data:/data
      - zookeeper_1_datalog:/datalog
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181
    networks:
      - app-tier

  # zookeeper-2:
  #   image: zookeeper:3.7.0
  #   restart: 'no'
  #   hostname: zookeeper-2
  #   container_name: zookeeper-2
  #   ports:
  #     - 2182:2181
  #   volumes:
  #     - zookeeper_2_data:/data
  #     - zookeeper_2_datalog:/datalog
  #   environment:
  #     ZOO_MY_ID: 2
  #     ZOO_SERVERS: server.1=zookeeper-1:2888:3888;2181 server.2=0.0.0.0:2888:3888;2181
  #   networks:
  #     - app-tier

  kafka-broker-1:
    image: confluentinc/cp-kafka:6.1.1
    restart: 'no'
    hostname: kafka-broker-1
    container_name: kafka-broker-1
    depends_on:
      - zookeeper-1
    ports:
      - '9092:9092'
    volumes:
      - kafka_broker_1_data:/var/lib/kafka/data
    environment:
      <<: *kafka-common-variables
      KAFKA_CLUSTER_ID: swiq-app
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-1:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT,INTER_BROKER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: CLIENT://localhost:9092,INTER_BROKER://kafka-broker-1:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTER_BROKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-tier

  # kafka-broker-2:
  #   image: confluentinc/cp-kafka:6.1.1
  #   restart: 'no'
  #   hostname: kafka-broker-2
  #   container_name: kafka-broker-2
  #   depends_on:
  #     - zookeeper-1
  #     - zookeeper-2
  #   ports:
  #     - '9094:9094'
  #   volumes:
  #     - kafka_broker_2_data:/var/lib/kafka/data
  #   environment:
  #     <<: *kafka-common-variables
  #     KAFKA_CLUSTER_ID: swiq-app
  #     KAFKA_BROKER_ID: 2
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-1:2181,zookeeper-2:2181'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT,INTER_BROKER:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: CLIENT://localhost:9094,INTER_BROKER://kafka-broker-2:9095
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTER_BROKER
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   networks:
  #     - app-tier

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka-broker-1
      # - kafka-broker-2
    ports:
      - '8080:8080'
    restart: 'no'
    environment:
      - KAFKA_CLUSTERS_0_NAME=swiq-app
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-broker-1:9093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper-1:2181
    networks:
      - app-tier

networks:
  app-tier:
    driver: bridge

volumes:
  mono-node-modules:
    driver: local
  postgresql_data:
    driver: local
  zookeeper_1_data:
    driver: local
  zookeeper_1_datalog:
    driver: local
  zookeeper_2_data:
    driver: local
  zookeeper_2_datalog:
    driver: local
  kafka_broker_1_data:
    driver: local
  kafka_broker_2_data:
    driver: local
